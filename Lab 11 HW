## Lab 11 HW

if (!require("pacman")) install.packages("pacman")
pacman::p_load(httr,EcoHydRology,curl,data.table,multisensi)
# KEEP OPEN AS YOU WILL BE WALKING THROUGH IT FOR LAB	
vignette("multisensi-vignette")
#
# Let’s get started as normal. 
setwd("~")
objects()
rm(list=objects())
#
dir.create("~/Week11")
setwd("~/Week11/")
list.files(all.files = T)
objects()   # Should be empty.
# Run through Vignette Example like class

?EcoHydRology::PET_fromTemp
?EcoHydRology::NetRad

J <- seq(from = 1, to = 365, by = 5)

n <- 10
set.seed(1234)
X <- data.frame(Tmax_C = runif(n, min = 5, max = 30), Tmin_C = runif(n, min = 0, max = 25), slope = runif(n, min = 0.0, max = 0.2),
                aspect = runif(n, min = 0.0, max = 0.2),
                lat_radians=runif(n, min = 0.0, max = 1.1))


# Solution for PET_fromTemp
PET_fromTemp <- function (Jday, Tmax_C, Tmin_C, lat_radians, AvgT = (Tmax_C + Tmin_C)/2, albedo = 0.18, TerrestEmiss = 0.97, aspect = 0, slope = 0, forest = 0, PTconstant=1.26, AEparams=list(vp=NULL, opt="linear"))
{
  cloudiness <- EstCloudiness(Tmax_C, Tmin_C)
  DailyRad <- NetRad(lat_radians, Jday, Tmax_C, Tmin_C, albedo, forest, slope, aspect, AvgT, cloudiness, TerrestEmiss, AvgT, AEparams=AEparams)
  potentialET <- PTpet(DailyRad, AvgT, PTconstant)
  potentialET[which(potentialET < 0)] <- 0
  potentialET[which(Tmax_C == -999 | Tmin_C == -999)] <- (-999)
  return(potentialET)
}


# Look at what you are passing into your new function
View(X)

PET_looped <- function(X, Jday = J) {
  out <- matrix(nrow = nrow(X), ncol = length(Jday), NA)
  for (i in 1:nrow(X)) {
    out[i, ] <- PET_fromTemp(lat=X$lat[i],
                      Jday=Jday, Tmax_C=X$Tmax_C[i], 
                      Tmin_C=X$Tmin_C, 
                      slope= X$slope[i],aspect= X$aspect[i])
  }
  out <- na.omit(as.data.frame(out))
  names(out) <- paste("Jday", Jday, sep = "")
  return(out)
}


Y <- PET_looped(X,Jday = J)
#
# You can ignore all the warnings, remember Errors=bad, warnings=not so much 
# So lets move on and build our summary graph
par(cex.axis = 0.7, cex.lab = 0.8)
plot(J, Y[1, ], type = "l", xlab = "Day of Year", 
     ylab = "Potential ET")
for (i in 2:n) {
  lines(J, Y[i, ], type = "l", col = i)
}

# Multisensitivities
# 3 Sequential univariate sensitivity analyses
# 3.1 Calculation of sensitivity indices
PET_Looped.seq <- multisensi(model=PET_looped, reduction=NULL, center=FALSE,
                               design.args = list( Tmax_C = c(5,15,25), 
                                                   Tmin_C = c(0,10,18), 
                                                   slope = c(0.1,0.2,0.3),
                                                   aspect = c(0.1,.5,1.0),
                                                   lat=c(0.1,.77,1.1)))

print(PET_Looped.seq, digits = 2)
#
# 3.2 Graphical representation of sensitivity indices
#
dev.off() # Clean up previous par()
plot(PET_Looped.seq, normalized = TRUE, color = terrain.colors, gsi.plot = FALSE)#normalized the upper subplot shows the extreme (tirets), #inter-quartile (grey) and median (bold line) output values
title(xlab = "Days of the Year.")
plot(PET_Looped.seq, normalized = FALSE, color = terrain.colors, gsi.plot = FALSE)
title(xlab = "Days of the Year.")


#
# Take note of section 3.3 Calculating simulations apart, as there are 
# several ways to invoke the multisensi() function.
# First by building our X (design input) and Y (model run on X). Here 
# here is us doing the same sensitivities by passing previously run 
# models (Y)
X <- expand.grid(Tmax_C= c(5,15,25), 
                 Tmin_C = c(0,10,18), 
                 slope = c(0.1,0.2,0.3),
                 aspect = c(0.1,.5,1.0),
                 lat=c(0.1,.77,1.1))


# 4 Multivariate sensitivity analysis based on PCA
# read the vignette, though note we are using the multisensi() function
# to run our model (i.e. no “design” variable, and model=Solar_Looped)
PET_Looped.pca <- multisensi(model=PET_looped, reduction=basis.ACP, scale=FALSE,
                               design.args = list( Tmax_C = c(5,15,25), 
                                                   Tmin_C = c(0,10,18), 
                                                   slope = c(0.1,0.2,0.3),
                                                   aspect = c(0.1,.5,1.0),
                                                   lat=c(0.1,.77,1.1)))

summary(PET_Looped.pca, digits = 2)
# 4.2 Graphical representation for PCA based analysis with 
# explanation in vignette. These graphs require the plot window to be larger
# and might give "Error in plot.new() : figure margins too large". 
# If so expand the plot window.
dev.off()
plot(PET_Looped.pca, graph = 1)
plot(PET_Looped.pca, graph = 2)
plot(PET_Looped.pca, graph = 3)
#
# 5.1 Polynomial reduction of the multivariate output
# Skip 5.1 Polynomial reduction for now and move on to
# 6 Alternative methods of sensitivity analysis
# 6.1 With Sobol2007 implemented in the package sensitivity
# 
library(sensitivity)
m <- 10000
Xb <- na.omit(data.frame(Tmax_C = runif(m, min = 5, max = 30), 
                 Tmin_C = runif(m, min = 0,max = 25), 
                 slope = runif(m, min = 0.0, max = 0.2),
                 aspect = runif(m, min = 0.0, max = 0.2),
                 lat=runif(m, min = 0.0, max = 1.1)))

PET_Looped.seq.sobol <- multisensi(design = sobol2007, model = PET_looped,
                                     reduction = NULL, analysis = analysis.sensitivity, center = TRUE,
                                     design.args = list(X1 = Xb[1:(m/2), ], X2 = Xb[(1 + m/2):m, ], nboot = 100),
                                     analysis.args = list(keep.outputs = FALSE))
#
# Note, this is a good time time get a drink of water and/or pee as 
# it is running the function m=10,000 times (a few minutes).
#
print(PET_Looped.seq.sobol, digits = 2)
dev.off()
plot(PET_Looped.seq.sobol, normalized = TRUE, color = terrain.colors)


dev.off()  # this also cleans the graphics device. 
#
# 6.2 With fast99 implemented in the package sensitivity
#
PET_Looped.seq.fast <- multisensi(design = fast99, model = PET_looped,
                                    center = FALSE, reduction = NULL, analysis = analysis.sensitivity,
                                    design.args=list( factors=c("Tmax_C","Tmin_C","slope","aspect","lat"), 
                                                      n=1000, q = "qunif",
                                                      q.arg = list(list(min=5, max=30), 
                                                                   list(min=2, max=16),
                                                                   list(min=0, max=.2),
                                                                   list(min=0, max=.2),
                                                                   list(min = 0.0, max = 1.1))),
                                    analysis.args=list(keep.outputs=FALSE))

print(PET_Looped.seq.fast,digits=2)
plot(PET_Looped.seq.fast, normalized = TRUE, color = terrain.colors)





#### NetRad()  
J <- seq(from = 1, to = 365, by = 5)

NetRad_Looped <- function(X, Jday = J) {
  out <- matrix(nrow = nrow(X), ncol = length(Jday), NA)
  for (i in 1:nrow(X)) {
    out[i, ] <- NetRad(lat=X$lat[i],
                      Jday=Jday, Tx=X$Tx[i], 
                      Tn=(X$Tx[i]-X$Trange[i]), 
                      X$slope[i],X$aspect[i],units="Wm2")
  }
  out <- na.omit(as.data.frame(out))
  names(out) <- paste("Jday", Jday, sep = "")
  return(out)
}

n <- 10
set.seed(1234)
X <- na.omit(data.frame(Tx = runif(n, min = 5, max = 30), Trange = runif(n, min = 2,
                                                                 max = 16), slope = runif(n, min = 0.0, max = 0.2),
                aspect = runif(n, min = 0.0, max = 0.2),
                lat=runif(n, min = 0.0, max = 1.1)))  

View(X)

Y <- NetRad_Looped(X,Jday = J)

par(cex.axis = 0.7, cex.lab = 0.8)
plot(J, Y[1, ], type = "l", xlab = "Day of Year", 
     ylab = "Daily net radiation (kJ m-2 d-1))")
for (i in 2:n) {
  lines(J, Y[i, ], type = "l", col = i)
}

NetRad_Looped.seq <- multisensi(model=NetRad_Looped, reduction=NULL, center=FALSE,
                               design.args = list( Tx = c(5,15,25), 
                                                   Trange = c(2,9,16), 
                                                   slope = c(0.1,0.2,0.3),
                                                   aspect = c(0.1,.5,1.0),
                                                   lat=c(0.1,.77,1.1)))

print(NetRad_Looped.seq, digits = 2)

dev.off() # Clean up previous par()
plot(NetRad_Looped.seq, normalized = TRUE, color = terrain.colors, gsi.plot = FALSE)#normalized the upper subplot shows the extreme (tirets), #inter-quartile (grey) and median (bold line) output values
title(xlab = "Days of the Year.")
plot(NetRad_Looped.seq, normalized = FALSE, color = terrain.colors, gsi.plot = FALSE)
title(xlab = "Days of the Year.")


X <- expand.grid(Tx = c(5,15,25), 
                 Trange = c(2,9,16), 
                 slope = c(0.1,0.2,0.3),
                 aspect = c(0.1,.5,1.0),
                 lat=c(0.1,.77,1.1))

head(X,10)
Y <- NetRad_Looped(X,Jday=J)
head(Y,10)

NetRad_Looped.seq <- multisensi(design=X, model=Y, reduction=NULL, center=FALSE) 


NetRad_Looped.pca <- multisensi(model=NetRad_Looped, reduction=basis.ACP, scale=FALSE,
                               design.args = list( Tx = c(5,15,25), 
                                                   Trange = c(2,9,16), 
                                                   slope = c(0.1,0.2,0.3),
                                                   aspect = c(0.1,.5,1.0),
                                                   lat=c(0.1,.77,1.1)))

summary(NetRad_Looped.pca, digits = 2)

dev.off()
plot(NetRad_Looped.pca, graph = 1)
plot(NetRad_Looped.pca, graph = 2)
plot(NetRad_Looped.pca, graph = 3)

library(sensitivity)
m <- 10000
Xb <- data.frame(Tx = runif(m, min = 5, max = 30), 
                 Trange = runif(m, min = 2,max = 16), 
                 slope = runif(m, min = 0.0, max = 0.2),
                 aspect = runif(m, min = 0.0, max = 0.2),
                 lat=runif(m, min = 0.0, max = 1.1))

NetRad_Looped.seq.sobol <- multisensi(design = sobol2007, model = NetRad_Looped,
                                     reduction = NULL, analysis = analysis.sensitivity, center = TRUE,
                                     design.args = list(X1 = Xb[1:(m/2), ], X2 = Xb[(1 + m/2):m, ], nboot = 100),
                                     analysis.args = list(keep.outputs = FALSE))

print(NetRad_Looped.seq.sobol, digits = 2)
dev.off()
plot(NetRad_Looped.seq.sobol, normalized = TRUE, color = terrain.colors)


dev.off()
NetRad_Looped.seq.fast <- multisensi(design = fast99, model = NetRad_Looped,
                                    center = FALSE, reduction = NULL, analysis = analysis.sensitivity,
                                    design.args=list( factors=c("Tx","Trange","slope","aspect","lat"), 
                                                      n=1000, q = "qunif",
                                                      q.arg = list(list(min=5, max=30), 
                                                                   list(min=2, max=16),
                                                                   list(min=0, max=.2),
                                                                   list(min=0, max=.2),
                                                                   list(min = 0.0, max = 1.1))),
                                    analysis.args=list(keep.outputs=FALSE))

print(NetRad_Looped.seq.fast,digits=2)
plot(NetRad_Looped.seq.fast, normalized = TRUE, color = terrain.colors)

